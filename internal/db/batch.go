// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createForumUser = `-- name: CreateForumUser :batchexec
INSERT INTO forum_user (forum_slug, user_id)
VALUES ($1, (SELECT id FROM public.users WHERE users.nickname = $2))
ON CONFLICT DO NOTHING
`

type CreateForumUserBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateForumUserParams struct {
	ForumSlug string
	Nickname  string
}

func (q *Queries) CreateForumUser(ctx context.Context, arg []CreateForumUserParams) *CreateForumUserBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ForumSlug,
			a.Nickname,
		}
		batch.Queue(createForumUser, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateForumUserBatchResults{br, len(arg), false}
}

func (b *CreateForumUserBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateForumUserBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createPosts = `-- name: CreatePosts :batchone
INSERT INTO posts (message, parent_id, user_nn, thread_id, path)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created, isedited, message, parent_id, user_nn, thread_id, path
`

type CreatePostsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreatePostsParams struct {
	Message  string
	ParentID pgtype.Int4
	UserNn   string
	ThreadID int32
	Path     []int32
}

func (q *Queries) CreatePosts(ctx context.Context, arg []CreatePostsParams) *CreatePostsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Message,
			a.ParentID,
			a.UserNn,
			a.ThreadID,
			a.Path,
		}
		batch.Queue(createPosts, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreatePostsBatchResults{br, len(arg), false}
}

func (b *CreatePostsBatchResults) QueryRow(f func(int, Post, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i Post
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.Created,
			&i.Isedited,
			&i.Message,
			&i.ParentID,
			&i.UserNn,
			&i.ThreadID,
			&i.Path,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *CreatePostsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
